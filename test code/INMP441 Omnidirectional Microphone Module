#include <driver/i2s.h>

// The pin config as per your setup
i2s_pin_config_t pin_config = {
    .bck_io_num = 26,   // BCLK
    .ws_io_num = 25,    // LRCLK
    .data_out_num = I2S_PIN_NO_CHANGE, // Not used
    .data_in_num = 34   // DIN
};

void setup() {
  Serial.begin(115200);
  
  // The I2S config as per the I2S driver
  i2s_config_t i2s_config = {
      .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),  // Receive, not transfer
      .sample_rate = 16000,                                 // 16KHz
      .bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT,         // could be 16 or 32
      .channel_format = I2S_CHANNEL_FMT_ONLY_RIGHT,         // Although the INMP441 is mono, I2S_CHANNEL_FMT_RIGHT_LEFT would still work
      .communication_format = I2S_COMM_FORMAT_I2S,
      .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,             // Interrupt level 1
      .dma_buf_count = 4,                                   // number of buffers
      .dma_buf_len = 60                                     // samples per buffer
  };

  // The pin config as per your setup
  i2s_driver_install(I2S_NUM_0, &i2s_config, 0, NULL);
  i2s_set_pin(I2S_NUM_0, &pin_config);
  i2s_set_clk(I2S_NUM_0, 16000, I2S_BITS_PER_SAMPLE_32BIT, I2S_CHANNEL_MONO);
}

void loop() {
  // Buffer to read data into
  uint32_t buffer[60];

  // Read data from the I2S peripheral
  size_t bytes_read;
  i2s_read(I2S_NUM_0, &buffer, sizeof(buffer), &bytes_read, portMAX_DELAY);

  // Check if we've read any data
  if (bytes_read > 0) {
    // Print the raw values to the serial monitor
    Serial.println("I2S data:");
    for (int i = 0; i < (bytes_read / sizeof(uint32_t)); i++) {
      Serial.println(buffer[i], HEX);
    }
    Serial.println("--");
  }

  // Delay to not flood the serial monitor
  delay(1000);
}
